std::logic_error
Assertion failed: !y.contains(0); y: [ -2, 5]; const asol::interval asol::operator/(const asol::interval&, const asol::interval&) at ../interval.cpp:134
###############################################
Box generator tests
testing invalid arguments: Assertion failed: index_set.size()>0, asol::box_generator::box_generator(std::vector<asol::interval, std::allocator<asol::interval> >&, const std::vector<int, std::allocator<int> >&, int) at ../box_generator.cpp:38
testing invalid arguments: Assertion failed: equal_parts>=2; minimum 2 parts should be generated, asked for 1; asol::box_generator::box_generator(std::vector<asol::interval, std::allocator<asol::interval> >&, const std::vector<int, std::allocator<int> >&, int) at ../box_generator.cpp:37
testing invalid arguments: Assertion failed: equal_parts>=2; minimum 2 parts should be generated, asked for 0; asol::box_generator::box_generator(std::vector<asol::interval, std::allocator<asol::interval> >&, const std::vector<int, std::allocator<int> >&, int) at ../box_generator.cpp:37
number of variables: 1, equal parts: 2, subboxes: 2
number of variables: 1, equal parts: 3, subboxes: 3
number of variables: 1, equal parts: 4, subboxes: 4
number of variables: 2, equal parts: 2, subboxes: 4
number of variables: 2, equal parts: 3, subboxes: 9
number of variables: 2, equal parts: 4, subboxes: 16
number of variables: 3, equal parts: 2, subboxes: 8
number of variables: 3, equal parts: 3, subboxes: 27
number of variables: 3, equal parts: 4, subboxes: 64
number of variables: 4, equal parts: 2, subboxes: 16
number of variables: 4, equal parts: 3, subboxes: 81
number of variables: 4, equal parts: 4, subboxes: 256
###############################################
Jacobsen sparsity
0	21	
15	21	22	
8	15	21	
0	8	15	21	48	
7	15	22	
15	54	
6	7	22	54	
6	7	48	54	
9	15	87	
0	1	9	22	87	
0	1	9	48	87	
14	15	120	
5	6	14	22	120	
5	6	14	48	120	
10	15	151	
1	2	10	22	151	
1	2	10	48	151	
13	15	184	
4	5	13	22	184	
4	5	13	48	184	
11	15	215	
2	3	11	22	215	
2	3	11	48	215	
12	15	246	
3	4	12	22	246	
3	4	12	48	246	
###############################################
Hansen's example
==============================
Number of variables:   2
Max used index (args): 15
Common subexpressions: 1
Number of constraints: 1
Number of primitives:  13
Numeric constants:     3
==============================
Primitives in plain text format

0: v2 = v0 * v1
1: CSE: v2 (0)

2: v3 = sqr(v0)
3: v4 = v3 + v1
4: v5 = v4 + v2
5: v7 = n6 * v2
6: v8 = sqr(v1)
7: v10 = n9 * v8
8: v12 = n11 * v0
9: v13 = v12 - v10
10: v14 = v13 + v7
11: v15 = v14 / v5
12: Eq: v15 = rhs(0)

Type 1 common subexpressions:
Type 2 common subexpressions:
2
Type 3 common subexpressions:
0: [ 1, 5.25321]
1: [ 1, 9.96378]
Last value: [ 14.5, 14.5]
###############################################
Neumaier's interval challange
==============================
Number of variables:   7
Max used index (args): 28
Common subexpressions: 2
Number of constraints: 1
Number of primitives:  24
Numeric constants:     1
==============================
Primitives in plain text format

0: v7 = sqr(v1)
1: v8 = sqr(v0)
2: v9 = v8 + v7
3: CSE: v9 (0)

4: v10 = sqr(v3)
5: v11 = sqr(v2)
6: v12 = v11 + v10
7: CSE: v12 (1)

8: v13 = v0 * v2
9: v14 = v1 * v3
10: v15 = v14 + v13
11: v16 = v5 * v15
12: v17 = v0 * v3
13: v18 = v1 * v2
14: v19 = v18 - v17
15: v20 = v4 * v19
16: v21 = v20 + v16
17: v22 = v9 + v12
18: v24 = n23 * v21
19: v25 = v9 - v12
20: v26 = v6 * v25
21: v27 = v26 + v24
22: v28 = v27 / v22
23: Eq: v28 = rhs(0)

Type 1 common subexpressions:
Type 2 common subexpressions:
9
12
Type 3 common subexpressions:
0: [ -0.888808, -0.6]
1: [ -0.1, 0.2]
2: [ 0.3, 0.7]
3: [ -0.2, 0.1]
4: [ -1, 1]
5: [ -1, 1]
6: [ 7, 9]
Last value: [ 0, 0]
###############################################
(x-1)/(x^2+2)
==============================
Number of variables:   1
Max used index (args): 6
Common subexpressions: 0
Number of constraints: 0
Number of primitives:  4
Numeric constants:     2
==============================
Primitives in plain text format

0: v1 = sqr(v0)
1: v3 = v1 + n2
2: v5 = v0 + n4
3: v6 = v5 / v3
Type 1 common subexpressions:
Type 2 common subexpressions:
Type 3 common subexpressions:
0: [ 2, 4]
Last value: [ 0.0555556, 0.5]
###############################################
(x^2+x)/(16*x-9)
==============================
Number of variables:   1
Max used index (args): 7
Common subexpressions: 0
Number of constraints: 0
Number of primitives:  5
Numeric constants:     2
==============================
Primitives in plain text format

0: v2 = n1 * v0
1: v4 = v2 + n3
2: v5 = sqr(v0)
3: v6 = v5 + v0
4: v7 = v6 / v4
Type 1 common subexpressions:
Type 2 common subexpressions:
Type 3 common subexpressions:
0: [ 1, 2]
Last value: [ 0.0869565, 0.857143]
###############################################
x^2+y^2=1
x^2-y  =0
==============================
Number of variables:   2
Max used index (args): 5
Common subexpressions: 1
Number of constraints: 2
Number of primitives:  7
Numeric constants:     0
==============================
Primitives in plain text format

0: v2 = sqr(v0)
1: CSE: v2 (0)

2: v3 = sqr(v1)
3: v4 = v2 + v3
4: Eq: v4 = rhs(0)

5: v5 = v2 - v1
6: Eq: v5 = rhs(1)

Type 1 common subexpressions:
Type 2 common subexpressions:
2
Type 3 common subexpressions:
0: [ -0.786195, -0.786097]
1: [ 0.617997, 0.618079]
Last value: [ 0, 0]
###############################################
Jacobsen
==============================
Number of variables:   16
Max used index (args): 276
Common subexpressions: 10
Number of constraints: 16
Number of primitives:  207
Numeric constants:     80
==============================
Primitives in plain text format

0: v17 = n16 / v0
1: v19 = v17 + n18
2: v21 = n20 / v19
3: CSE: v21 (0)

4: v22 = v15 * v21
5: CSE: v22 (1)

6: v24 = n23 * v21
7: v26 = n25 - v24
8: v27 = v8 - v15
9: v28 = v27 * v26
10: Eq: v28 = rhs(0)

11: v30 = n29 * v0
12: v31 = exp(v30)
13: v33 = n32 * v31
14: v35 = n34 * v0
15: v36 = exp(v35)
16: v38 = n37 * v36
17: v39 = v38 + v33
18: v41 = n40 * v21
19: v42 = exp(v41)
20: v44 = n43 * v42
21: v45 = v15 * v44
22: v46 = v39 - v44
23: v47 = v8 * v46
24: v48 = v47 + v45
25: CSE: v48 (2)

26: v50 = n49 - v15
27: v51 = v50 * v7
28: v52 = v51 + v22
29: Eq: v52 = rhs(1)

30: v54 = n53 - v15
31: CSE: v54 (3)

32: v56 = n55 / v7
33: v58 = v56 + n57
34: v60 = n59 / v58
35: v61 = v54 * v6
36: v63 = n62 * v60
37: v64 = v63 - v61
38: v65 = v64 - v22
39: Eq: v65 = rhs(2)

40: v67 = n66 * v7
41: v68 = exp(v67)
42: v70 = n69 * v68
43: v72 = n71 * v7
44: v73 = exp(v72)
45: v75 = n74 * v73
46: v76 = v75 + v70
47: v78 = n77 * v6
48: v79 = exp(v78)
49: v81 = n80 * v79
50: v82 = v54 * v81
51: v84 = n83 * v76
52: v85 = v84 - v82
53: v86 = v85 - v48
54: Eq: v86 = rhs(3)

55: v87 = v9 - v15
56: CSE: v87 (4)

57: v89 = n88 / v1
58: v91 = v89 + n90
59: v93 = n92 / v91
60: v94 = v87 * v0
61: v95 = v9 * v93
62: v96 = v95 - v94
63: v97 = v96 - v22
64: Eq: v97 = rhs(4)

65: v99 = n98 * v1
66: v100 = exp(v99)
67: v102 = n101 * v100
68: v104 = n103 * v1
69: v105 = exp(v104)
70: v107 = n106 * v105
71: v108 = v107 + v102
72: v110 = n109 * v0
73: v111 = exp(v110)
74: v113 = n112 * v111
75: v114 = v87 * v113
76: v115 = v9 * v108
77: v116 = v115 - v114
78: v117 = v116 - v48
79: Eq: v117 = rhs(5)

80: v119 = v14 + n118
81: v120 = v119 - v15
82: CSE: v120 (5)

83: v122 = n121 / v6
84: v124 = v122 + n123
85: v126 = n125 / v124
86: v127 = v120 * v5
87: v128 = v14 * v126
88: v129 = v128 - v127
89: v130 = v129 - v22
90: Eq: v130 = rhs(6)

91: v132 = n131 * v6
92: v133 = exp(v132)
93: v135 = n134 * v133
94: v137 = n136 * v6
95: v138 = exp(v137)
96: v140 = n139 * v138
97: v141 = v140 + v135
98: v143 = n142 * v5
99: v144 = exp(v143)
100: v146 = n145 * v144
101: v147 = v120 * v146
102: v148 = v14 * v141
103: v149 = v148 - v147
104: v150 = v149 - v48
105: Eq: v150 = rhs(7)

106: v151 = v10 - v15
107: CSE: v151 (6)

108: v153 = n152 / v2
109: v155 = v153 + n154
110: v157 = n156 / v155
111: v158 = v151 * v1
112: v159 = v10 * v157
113: v160 = v159 - v158
114: v161 = v160 - v22
115: Eq: v161 = rhs(8)

116: v163 = n162 * v2
117: v164 = exp(v163)
118: v166 = n165 * v164
119: v168 = n167 * v2
120: v169 = exp(v168)
121: v171 = n170 * v169
122: v172 = v171 + v166
123: v174 = n173 * v1
124: v175 = exp(v174)
125: v177 = n176 * v175
126: v178 = v151 * v177
127: v179 = v10 * v172
128: v180 = v179 - v178
129: v181 = v180 - v48
130: Eq: v181 = rhs(9)

131: v183 = v13 + n182
132: v184 = v183 - v15
133: CSE: v184 (7)

134: v186 = n185 / v5
135: v188 = v186 + n187
136: v190 = n189 / v188
137: v191 = v184 * v4
138: v192 = v13 * v190
139: v193 = v192 - v191
140: v194 = v193 - v22
141: Eq: v194 = rhs(10)

142: v196 = n195 * v5
143: v197 = exp(v196)
144: v199 = n198 * v197
145: v201 = n200 * v5
146: v202 = exp(v201)
147: v204 = n203 * v202
148: v205 = v204 + v199
149: v207 = n206 * v4
150: v208 = exp(v207)
151: v210 = n209 * v208
152: v211 = v184 * v210
153: v212 = v13 * v205
154: v213 = v212 - v211
155: v214 = v213 - v48
156: Eq: v214 = rhs(11)

157: v215 = v11 - v15
158: CSE: v215 (8)

159: v217 = n216 / v3
160: v219 = v217 + n218
161: v221 = n220 / v219
162: v222 = v215 * v2
163: v223 = v11 * v221
164: v224 = v223 - v222
165: v225 = v224 - v22
166: Eq: v225 = rhs(12)

167: v227 = n226 * v3
168: v228 = exp(v227)
169: v230 = n229 * v228
170: v232 = n231 * v3
171: v233 = exp(v232)
172: v235 = n234 * v233
173: v236 = v235 + v230
174: v238 = n237 * v2
175: v239 = exp(v238)
176: v241 = n240 * v239
177: v242 = v215 * v241
178: v243 = v11 * v236
179: v244 = v243 - v242
180: v245 = v244 - v48
181: Eq: v245 = rhs(13)

182: v246 = v12 - v15
183: CSE: v246 (9)

184: v248 = n247 / v4
185: v250 = v248 + n249
186: v252 = n251 / v250
187: v253 = v246 * v3
188: v254 = v12 * v252
189: v255 = v254 - v253
190: v256 = v255 - v22
191: Eq: v256 = rhs(14)

192: v258 = n257 * v4
193: v259 = exp(v258)
194: v261 = n260 * v259
195: v263 = n262 * v4
196: v264 = exp(v263)
197: v266 = n265 * v264
198: v267 = v266 + v261
199: v269 = n268 * v3
200: v270 = exp(v269)
201: v272 = n271 * v270
202: v273 = v246 * v272
203: v274 = v12 * v267
204: v275 = v274 - v273
205: v276 = v275 - v48
206: Eq: v276 = rhs(15)

Type 1 common subexpressions:
Type 2 common subexpressions:
21
22
48
54
87
120
151
184
215
246
Type 3 common subexpressions:
44
0: [ 0.0001, 1]
1: [ 0.0001, 1]
2: [ 0.0001, 1]
3: [ 0.0001, 1]
4: [ 0.0001, 1]
5: [ 0.0001, 1]
6: [ 0.0001, 1]
7: [ 0.0001, 1]
8: [ 2, 4]
9: [ 2, 4]
10: [ 2, 4]
11: [ 2, 4]
12: [ 2, 4]
13: [ 2, 4]
14: [ 2, 4]
15: [ 0, 1.12]
Last value: [ 0, 0]
###############################################
Bratu 
0: [ -0.0137907, 9.70527]
1: [ -0.0286076, 9.7555]
2: [ -0.0442788, 9.77113]
3: [ -0.0606316, 9.78364]
4: [ -0.0774924, 9.79288]
5: [ -0.0946846, 9.79879]
6: [ -0.112028, 9.80161]
7: [ -0.129339, 9.80173]
8: [ -0.146428, 9.7996]
9: [ -0.163099, 9.79568]
10: [ -0.179149, 9.79035]
11: [ -0.19437, 9.78395]
12: [ -0.208544, 9.77678]
13: [ -0.221448, 9.76908]
14: [ -0.232849, 9.76103]
15: [ -0.242508, 9.75279]
16: [ -0.250178, 9.74449]
17: [ -0.255606, 9.73624]
18: [ -0.25853, 9.7281]
19: [ -0.258684, 9.71996]
20: [ -0.255797, 9.71204]
21: [ -0.249592, 9.70437]
22: [ -0.239789, 9.69697]
23: [ -0.226109, 9.68985]
24: [ -0.208271, 9.68302]
25: [ -0.186002, 9.67647]
26: [ -0.15904, 9.67019]
27: [ -0.12714, 9.66324]
28: [ -0.0900928, 9.65743]
29: [ -0.0477382, 9.6747]
###############################################
Bratu solutions revise

Testing solution 1 of 2
Strictly contains 1 of 2 solutions (1)
0: [ 0.0121941, 0.0222047]
1: [ 0.0233402, 0.0433402]
2: [ 0.0384051, 0.0584051]
3: [ 0.0523778, 0.0723778]
4: [ 0.0652429, 0.0852429]
5: [ 0.0769862, 0.0969862]
6: [ 0.0875943, 0.107594]
7: [ 0.0970551, 0.117055]
8: [ 0.105358, 0.125358]
9: [ 0.112493, 0.132493]
10: [ 0.118451, 0.138451]
11: [ 0.123227, 0.143227]
12: [ 0.126813, 0.146813]
13: [ 0.129207, 0.149207]
14: [ 0.130404, 0.150404]
15: [ 0.130404, 0.150404]
16: [ 0.129207, 0.149207]
17: [ 0.126813, 0.146813]
18: [ 0.123227, 0.143227]
19: [ 0.118451, 0.138451]
20: [ 0.112493, 0.132493]
21: [ 0.105366, 0.12535]
22: [ 0.0970828, 0.117028]
23: [ 0.0876612, 0.107527]
24: [ 0.0771315, 0.0968411]
25: [ 0.0655447, 0.0849412]
26: [ 0.0529926, 0.0717631]
27: [ 0.0396456, 0.0571646]
28: [ 0.0258322, 0.0408482]
29: [ 0.0121941, 0.0222047]

Testing solution 2 of 2
Strictly contains 1 of 2 solutions (2)
0: [ 0.343816, 0.35383]
1: [ 0.686171, 0.706171]
2: [ 1.03102, 1.05185]
3: [ 1.36991, 1.39758]
4: [ 1.70469, 1.73912]
5: [ 2.0337, 2.07479]
6: [ 2.35468, 2.40225]
7: [ 2.66454, 2.71837]
8: [ 2.95921, 3.01899]
9: [ 3.23341, 3.29873]
10: [ 3.48061, 3.55093]
11: [ 3.69315, 3.76776]
12: [ 3.86274, 3.94077]
13: [ 3.98134, 4.06177]
14: [ 4.04248, 4.12414]
15: [ 4.04248, 4.12414]
16: [ 3.98134, 4.06177]
17: [ 3.86274, 3.94077]
18: [ 3.69315, 3.76776]
19: [ 3.48061, 3.55093]
20: [ 3.23341, 3.29873]
21: [ 2.95921, 3.01899]
22: [ 2.66454, 2.71837]
23: [ 2.35468, 2.40225]
24: [ 2.0337, 2.07479]
25: [ 1.70469, 1.73912]
26: [ 1.36991, 1.39758]
27: [ 1.03102, 1.05185]
28: [ 0.68845, 0.703893]
29: [ 0.343816, 0.35383]
###############################################
Bratu solutions revise2

Testing solution 1 of 2
Strictly contains 1 of 2 solutions (1)
0: [ 0.0121941, 0.0222047]
1: [ 0.0233402, 0.0433402]
2: [ 0.0384051, 0.0584051]
3: [ 0.0523778, 0.0723778]
4: [ 0.0652429, 0.0852429]
5: [ 0.0769862, 0.0969862]
6: [ 0.0875943, 0.107594]
7: [ 0.0970551, 0.117055]
8: [ 0.105358, 0.125358]
9: [ 0.112493, 0.132493]
10: [ 0.118451, 0.138451]
11: [ 0.123227, 0.143227]
12: [ 0.126813, 0.146813]
13: [ 0.129207, 0.149207]
14: [ 0.130404, 0.150404]
15: [ 0.130404, 0.150404]
16: [ 0.129207, 0.149207]
17: [ 0.126813, 0.146813]
18: [ 0.123227, 0.143227]
19: [ 0.118451, 0.138451]
20: [ 0.112493, 0.132493]
21: [ 0.105366, 0.12535]
22: [ 0.0970828, 0.117028]
23: [ 0.0876612, 0.107527]
24: [ 0.0771315, 0.0968411]
25: [ 0.0655447, 0.0849412]
26: [ 0.0529926, 0.0717631]
27: [ 0.0396456, 0.0571646]
28: [ 0.0258322, 0.0408482]
29: [ 0.0121941, 0.0222047]

Testing solution 2 of 2
Strictly contains 1 of 2 solutions (2)
0: [ 0.343816, 0.35383]
1: [ 0.686171, 0.706171]
2: [ 1.03102, 1.05185]
3: [ 1.36991, 1.39758]
4: [ 1.70469, 1.73912]
5: [ 2.0337, 2.07479]
6: [ 2.35468, 2.40225]
7: [ 2.66454, 2.71837]
8: [ 2.95921, 3.01899]
9: [ 3.23341, 3.29873]
10: [ 3.48061, 3.55093]
11: [ 3.69315, 3.76776]
12: [ 3.86274, 3.94077]
13: [ 3.98134, 4.06177]
14: [ 4.04248, 4.12414]
15: [ 4.04248, 4.12414]
16: [ 3.98134, 4.06177]
17: [ 3.86274, 3.94077]
18: [ 3.69315, 3.76776]
19: [ 3.48061, 3.55093]
20: [ 3.23341, 3.29873]
21: [ 2.95921, 3.01899]
22: [ 2.66454, 2.71837]
23: [ 2.35468, 2.40225]
24: [ 2.0337, 2.07479]
25: [ 1.70469, 1.73912]
26: [ 1.36991, 1.39758]
27: [ 1.03102, 1.05185]
28: [ 0.68845, 0.703893]
29: [ 0.343816, 0.35383]
###############################################
Jacobsen solutions revise_all

Testing solution 1 of 5
Strictly contains 1 of 5 solutions (1)
0: [ 0.985726, 1]
1: [ 0.976317, 0.996317]
2: [ 0.948235, 0.968235]
3: [ 0.870923, 0.890923]
4: [ 0.698062, 0.718062]
5: [ 0.535244, 0.555244]
6: [ 0.305806, 0.325806]
7: [ 0.123961, 0.140669]
8: [ 3.40004, 3.43066]
9: [ 3.38074, 3.44903]
10: [ 3.37297, 3.44111]
11: [ 3.3511, 3.4188]
12: [ 3.29732, 3.36393]
13: [ 3.22672, 3.29191]
14: [ 3.1064, 3.16916]
15: [ 0.416717, 0.43263]

Testing solution 2 of 5
Strictly contains 1 of 5 solutions (2)
0: [ 0.193818, 0.200323]
1: [ 0.09548, 0.112846]
2: [ 0.0715134, 0.0856427]
3: [ 0.0653283, 0.0786645]
4: [ 0.063762, 0.0769002]
5: [ 0.0146064, 0.0262712]
6: [ 0.000714993, 0.0108883]
7: [ 0.0001, 0.00648003]
8: [ 3.08556, 3.14538]
9: [ 3.01475, 3.07565]
10: [ 3.00489, 3.0656]
11: [ 3.00362, 3.0643]
12: [ 3.0034, 3.06408]
13: [ 2.96566, 3.02558]
14: [ 2.96837, 3.02834]
15: [ 1.06436, 1.08586]

Testing solution 3 of 5
Strictly contains 1 of 5 solutions (3)
0: [ 0.97717, 0.99717]
1: [ 0.950178, 0.970178]
2: [ 0.876708, 0.896708]
3: [ 0.712446, 0.732446]
4: [ 0.465227, 0.485227]
5: [ 0.244145, 0.264145]
6: [ 0.0943613, 0.113815]
7: [ 0.0302723, 0.0408953]
8: [ 3.45262, 3.48758]
9: [ 3.42785, 3.4971]
10: [ 3.40678, 3.4756]
11: [ 3.35541, 3.42319]
12: [ 3.25309, 3.31881]
13: [ 3.11424, 3.17715]
14: [ 3.00125, 3.06189]
15: [ 0.476419, 0.490285]

Testing solution 4 of 5
Strictly contains 1 of 5 solutions (4)
0: [ 0.987599, 1]
1: [ 0.98207, 1]
2: [ 0.96462, 0.98462]
3: [ 0.912358, 0.932358]
4: [ 0.777479, 0.797479]
5: [ 0.700547, 0.720547]
6: [ 0.527422, 0.547422]
7: [ 0.282755, 0.302755]
8: [ 3.27035, 3.29957]
9: [ 3.25345, 3.31918]
10: [ 3.24883, 3.31446]
11: [ 3.2348, 3.30015]
12: [ 3.19647, 3.26105]
13: [ 3.15854, 3.22234]
14: [ 3.09941, 3.16202]
15: [ 0.283312, 0.303312]

Testing solution 5 of 5
Strictly contains 1 of 5 solutions (5)
0: [ 0.924517, 0.944517]
1: [ 0.80886, 0.82886]
2: [ 0.592621, 0.612621]
3: [ 0.34567, 0.36567]
4: [ 0.182086, 0.202086]
5: [ 0.066714, 0.0828454]
6: [ 0.0202803, 0.0313469]
7: [ 0.00370474, 0.0128223]
8: [ 3.43414, 3.46988]
9: [ 3.38339, 3.45174]
10: [ 3.30796, 3.37478]
11: [ 3.18122, 3.24549]
12: [ 3.06655, 3.1285]
13: [ 2.98174, 3.04198]
14: [ 2.96753, 3.02748]
15: [ 0.498944, 0.51145]
###############################################
Jacobsen solutions with iterative revision

Testing solution 1 of 5
Strictly contains 1 of 5 solutions (1)
0: [ 0.985726, 1]
1: [ 0.976317, 0.996317]
2: [ 0.948235, 0.968235]
3: [ 0.870923, 0.890923]
4: [ 0.698062, 0.718062]
5: [ 0.535244, 0.555244]
6: [ 0.305806, 0.325806]
7: [ 0.12518, 0.139425]
8: [ 3.40463, 3.42671]
9: [ 3.38977, 3.44124]
10: [ 3.37887, 3.43351]
11: [ 3.35638, 3.41184]
12: [ 3.30007, 3.35975]
13: [ 3.22672, 3.29191]
14: [ 3.1064, 3.16916]
15: [ 0.418993, 0.430453]

Testing solution 2 of 5
Strictly contains 1 of 5 solutions (2)
0: [ 0.193861, 0.199823]
1: [ 0.101057, 0.106838]
2: [ 0.0764852, 0.0803407]
3: [ 0.0704303, 0.073231]
4: [ 0.0687865, 0.0715421]
5: [ 0.0192988, 0.0212978]
6: [ 0.00459761, 0.00682492]
7: [ 0.00126822, 0.00190825]
8: [ 3.09923, 3.13216]
9: [ 3.02228, 3.06857]
10: [ 3.01376, 3.05712]
11: [ 3.01442, 3.05376]
12: [ 3.0115, 3.0562]
13: [ 2.96791, 3.02394]
14: [ 2.97742, 3.0196]
15: [ 1.06436, 1.08586]

Testing solution 3 of 5
Strictly contains 1 of 5 solutions (3)
0: [ 0.97717, 0.99717]
1: [ 0.950178, 0.970178]
2: [ 0.876708, 0.896708]
3: [ 0.712446, 0.732446]
4: [ 0.465227, 0.485227]
5: [ 0.244145, 0.264145]
6: [ 0.0959244, 0.112217]
7: [ 0.0321765, 0.0390795]
8: [ 3.45926, 3.48083]
9: [ 3.43418, 3.49085]
10: [ 3.41253, 3.46993]
11: [ 3.35926, 3.41941]
12: [ 3.25309, 3.31881]
13: [ 3.11424, 3.17715]
14: [ 3.00125, 3.06189]
15: [ 0.480064, 0.486665]

Testing solution 4 of 5
Strictly contains 1 of 5 solutions (4)
0: [ 0.987599, 1]
1: [ 0.98207, 1]
2: [ 0.96462, 0.98462]
3: [ 0.912358, 0.932358]
4: [ 0.777479, 0.797479]
5: [ 0.700547, 0.720547]
6: [ 0.527422, 0.547422]
7: [ 0.282755, 0.302755]
8: [ 3.27035, 3.29957]
9: [ 3.25743, 3.31497]
10: [ 3.24986, 3.31125]
11: [ 3.2348, 3.29731]
12: [ 3.19647, 3.2597]
13: [ 3.15854, 3.22234]
14: [ 3.09941, 3.16202]
15: [ 0.283312, 0.303312]

Testing solution 5 of 5
Strictly contains 1 of 5 solutions (5)
0: [ 0.924517, 0.944517]
1: [ 0.80886, 0.82886]
2: [ 0.592621, 0.612621]
3: [ 0.34567, 0.36567]
4: [ 0.182086, 0.202086]
5: [ 0.0682636, 0.0811291]
6: [ 0.0227929, 0.028772]
7: [ 0.00716118, 0.00933859]
8: [ 3.44194, 3.46205]
9: [ 3.39476, 3.44053]
10: [ 3.31582, 3.36705]
11: [ 3.18122, 3.24549]
12: [ 3.06655, 3.1285]
13: [ 2.98174, 3.04198]
14: [ 2.96753, 3.02748]
15: [ 0.503556, 0.507899]
###############################################
Jacobsen solutions probing

Testing solution 1 of 5
Strictly contains 1 of 5 solutions (1)
0: [ 0.986365, 1]
1: [ 0.976564, 0.996317]
2: [ 0.948235, 0.968235]
3: [ 0.870923, 0.890923]
4: [ 0.698062, 0.718062]
5: [ 0.535244, 0.555244]
6: [ 0.305806, 0.325806]
7: [ 0.126244, 0.138314]
8: [ 3.40585, 3.42592]
9: [ 3.39478, 3.43425]
10: [ 3.38587, 3.42691]
11: [ 3.36113, 3.40791]
12: [ 3.30442, 3.35537]
13: [ 3.22794, 3.28992]
14: [ 3.1064, 3.16916]
15: [ 0.419743, 0.429666]

Testing solution 2 of 5
Strictly contains 1 of 5 solutions (2)
0: [ 0.194322, 0.199471]
1: [ 0.102676, 0.10518]
2: [ 0.0777864, 0.0789753]
3: [ 0.0711069, 0.0725105]
4: [ 0.0694402, 0.0708515]
5: [ 0.0198473, 0.0207055]
6: [ 0.00550411, 0.0058202]
7: [ 0.00152045, 0.00162586]
8: [ 3.10756, 3.1199]
9: [ 3.03347, 3.05705]
10: [ 3.02424, 3.04621]
11: [ 3.02219, 3.04578]
12: [ 3.02181, 3.04572]
13: [ 2.98477, 3.0061]
14: [ 2.9888, 3.0078]
15: [ 1.0656, 1.08413]

Testing solution 3 of 5
Strictly contains 1 of 5 solutions (3)
0: [ 0.977708, 0.996728]
1: [ 0.950178, 0.970178]
2: [ 0.876708, 0.896708]
3: [ 0.712446, 0.732446]
4: [ 0.465227, 0.485227]
5: [ 0.244145, 0.264145]
6: [ 0.0976541, 0.110205]
7: [ 0.0331164, 0.0380067]
8: [ 3.46031, 3.47992]
9: [ 3.44283, 3.48206]
10: [ 3.42012, 3.46214]
11: [ 3.36416, 3.41443]
12: [ 3.25566, 3.31619]
13: [ 3.11424, 3.17715]
14: [ 3.00134, 3.06189]
15: [ 0.480707, 0.486083]

Testing solution 4 of 5
Strictly contains 1 of 5 solutions (4)
0: [ 0.987599, 1]
1: [ 0.98207, 1]
2: [ 0.96462, 0.98462]
3: [ 0.912358, 0.932358]
4: [ 0.777479, 0.797479]
5: [ 0.700547, 0.720547]
6: [ 0.527422, 0.547422]
7: [ 0.282755, 0.302755]
8: [ 3.27035, 3.29957]
9: [ 3.26092, 3.3112]
10: [ 3.2533, 3.30778]
11: [ 3.23759, 3.29411]
12: [ 3.19647, 3.25812]
13: [ 3.15854, 3.22208]
14: [ 3.09941, 3.16111]
15: [ 0.283312, 0.303312]

Testing solution 5 of 5
Strictly contains 1 of 5 solutions (5)
0: [ 0.92607, 0.942945]
1: [ 0.80886, 0.82886]
2: [ 0.592621, 0.612621]
3: [ 0.34567, 0.36567]
4: [ 0.182086, 0.202086]
5: [ 0.0686416, 0.0806372]
6: [ 0.0233004, 0.0281281]
7: [ 0.0074104, 0.00904145]
8: [ 3.44359, 3.46043]
9: [ 3.40231, 3.43283]
10: [ 3.32278, 3.35992]
11: [ 3.18413, 3.24262]
12: [ 3.06655, 3.1285]
13: [ 2.98174, 3.04198]
14: [ 2.97761, 3.01792]
15: [ 0.503961, 0.507512]
###############################################
eco9 solutions iterative revise

Testing solution 1 of 16
Strictly contains 1 of 16 solutions (1)
0: [ -0.135, -0.115]
1: [ -0.135, -0.115]
2: [ -0.135, -0.115]
3: [ -0.135, -0.115]
4: [ -0.135, -0.115]
5: [ -0.135, -0.115]
6: [ -0.135, -0.115]
7: [ -0.135, -0.115]

Testing solution 2 of 16
Strictly contains 1 of 16 solutions (2)
0: [ 0.635506, 0.655506]
1: [ 0.607128, 0.627128]
2: [ 0.662842, 0.682842]
3: [ -2.11196, -2.07014]
4: [ 0.136597, 0.156597]
5: [ 0.00246164, 0.0224616]
6: [ -0.197308, -0.177308]
7: [ -0.826178, -0.806178]

Testing solution 3 of 16
Strictly contains 1 of 16 solutions (3)
0: [ 0.842877, 0.862877]
1: [ 0.119364, 0.139364]
2: [ -1.211, -1.18702]
3: [ 0.567669, 0.587669]
4: [ -0.617114, -0.597114]
5: [ -0.289331, -0.269331]
6: [ -0.015232, -0.00550587]
7: [ -0.474184, -0.454184]

Testing solution 4 of 16
Strictly contains 1 of 16 solutions (4)
0: [ -0.0734148, -0.0534148]
1: [ -0.672095, -0.652095]
2: [ 1.60712, 1.63959]
3: [ 0.112449, 0.132449]
4: [ 0.173346, 0.193346]
5: [ -0.960989, -0.940989]
6: [ -0.616428, -0.596428]
7: [ -0.656226, -0.636226]

Testing solution 5 of 16
Strictly contains 1 of 16 solutions (5)
0: [ -0.0494626, -0.0294626]
1: [ 1.12226, 1.14493]
2: [ -0.482669, -0.462669]
3: [ -0.958774, -0.938774]
4: [ -0.0297211, -0.00972105]
5: [ 0.134811, 0.154811]
6: [ -0.391067, -0.371067]
7: [ -0.426711, -0.406711]

Testing solution 6 of 16
Strictly contains 1 of 16 solutions (6)
0: [ 0.549969, 0.569969]
1: [ -0.710057, -0.690057]
2: [ 0.190279, 0.210279]
3: [ -0.453045, -0.433045]
4: [ 0.00663411, 0.0266341]
5: [ -0.321824, -0.301824]
6: [ -0.0828269, -0.0716297]
7: [ -0.254827, -0.234827]

Testing solution 7 of 16
Strictly contains 1 of 16 solutions (7)
0: [ 0.0121226, 0.0321226]
1: [ 0.591768, 0.611768]
2: [ 1.29484, 1.321]
3: [ -1.25693, -1.23204]
4: [ 2.55723, 2.60889]
5: [ -0.288691, -0.268691]
6: [ -1.85574, -1.819]
7: [ -2.17586, -2.13278]

Testing solution 8 of 16
Strictly contains 1 of 16 solutions (8)
0: [ 1.52247, 1.55322]
1: [ 0.214122, 0.234122]
2: [ -1.18989, -1.16633]
3: [ -0.268552, -0.248552]
4: [ 0.376083, 0.396083]
5: [ -1.41891, -1.39081]
6: [ 0.592632, 0.612632]
7: [ -0.919159, -0.899159]

Testing solution 9 of 16
Strictly contains 1 of 16 solutions (9)
0: [ 0.997923, 1.0021]
1: [ 0.99559, 1.00447]
2: [ 0.99297, 1.00714]
3: [ 0.990026, 1.01]
4: [ 0.99, 1.01]
5: [ 0.99, 1.01]
6: [ 0.99, 1.01]
7: [ -8.05375, -7.94645]

Testing solution 10 of 16
Strictly contains 1 of 16 solutions (10)
0: [ 0.931389, 0.945583]
1: [ 1.45689, 1.48632]
2: [ -0.293717, -0.273717]
3: [ -0.199484, -0.179484]
4: [ -2.53718, -2.48694]
5: [ 1.01431, 1.0348]
6: [ 0.088131, 0.108131]
7: [ -1.56292, -1.53197]

Testing solution 11 of 16
Strictly contains 1 of 16 solutions (11)
0: [ 0.219494, 0.239494]
1: [ -0.0252683, -0.00526829]
2: [ -0.189614, -0.169614]
3: [ 2.53638, 2.58762]
4: [ -0.834382, -0.814382]
5: [ -0.76612, -0.74612]
6: [ -0.800888, -0.780888]
7: [ -1.23747, -1.21297]

Testing solution 12 of 16
Strictly contains 1 of 16 solutions (12)
0: [ 0.305031, 0.325031]
1: [ 1.26091, 1.28639]
2: [ -0.0779422, -0.0579422]
3: [ 1.79153, 1.82772]
4: [ -0.828041, -0.808041]
5: [ 2.8308, 2.88799]
6: [ -2.31007, -2.26433]
7: [ -4.12536, -4.04367]

Testing solution 13 of 16
Strictly contains 1 of 16 solutions (13)
0: [ 0.909946, 0.91907]
1: [ -0.357508, -0.337508]
2: [ 0.0373254, 0.0573254]
3: [ 2.25405, 2.29958]
4: [ 1.12294, 1.14563]
5: [ -2.74754, -2.69313]
6: [ 0.0847001, 0.1047]
7: [ -2.42374, -2.37574]

Testing solution 14 of 16
Strictly contains 1 of 16 solutions (14)
0: [ 1.60856, 1.6385]
1: [ 1.6087, 1.6412]
2: [ 0.604711, 0.624711]
3: [ -1.03604, -1.01552]
4: [ -2.06472, -2.02384]
5: [ -1.04067, -1.02007]
6: [ 2.24556, 2.29092]
7: [ -3.06116, -3.00055]

Testing solution 15 of 16
Strictly contains 1 of 16 solutions (15)
0: [ -0.672846, -0.652846]
1: [ 1.52978, 1.56068]
2: [ -0.43466, -0.41466]
3: [ 0.274386, 0.294386]
4: [ 1.28287, 1.30878]
5: [ -0.256516, -0.236516]
6: [ -1.70842, -1.67459]
7: [ -1.11092, -1.08892]

Testing solution 16 of 16
Strictly contains 1 of 16 solutions (16)
0: [ -0.758383, -0.738383]
1: [ 0.32996, 0.34996]
2: [ 0.66449, 0.68449]
3: [ 0.328447, 0.348447]
4: [ -0.212818, -0.192818]
5: [ -0.546137, -0.526137]
6: [ -0.545619, -0.525619]
7: [ -0.338183, -0.321798]
###############################################
Wilson16 solutions probing
==============================
Number of variables:   16
Max used index (args): 112
Common subexpressions: 7
Number of constraints: 16
Number of primitives:  104
Numeric constants:     19
==============================
Primitives in plain text format

0: LE: v0 <= v7

1: LE: v1 <= v8

2: LE: v2 <= v9

3: v17 = n16 / v3
4: CSE: v17 (0)

5: v19 = n18 * v17
6: v20 = exp(v19)
7: v22 = n21 * v20
8: CSE: v22 (1)

9: v24 = n23 * v17
10: v25 = exp(v24)
11: v27 = n26 * v25
12: CSE: v27 (2)

13: v29 = n28 * v17
14: v30 = exp(v29)
15: v32 = n31 * v30
16: CSE: v32 (3)

17: v34 = n33 * v17
18: v35 = exp(v34)
19: v37 = n36 * v35
20: CSE: v37 (4)

21: v39 = n38 * v17
22: v40 = exp(v39)
23: v42 = n41 * v40
24: CSE: v42 (5)

25: v44 = n43 * v17
26: v45 = exp(v44)
27: v47 = n46 * v45
28: CSE: v47 (6)

29: v48 = v2 * v27
30: v49 = v1 * v22
31: v50 = v0 + v49
32: v51 = v50 + v48
33: v52 = v51 - v4
34: Eq: v52 = rhs(0)

35: v53 = v2 * v37
36: v54 = v0 * v32
37: v55 = v54 + v1
38: v56 = v55 + v53
39: v57 = v56 - v5
40: Eq: v57 = rhs(1)

41: v58 = v1 * v47
42: v59 = v0 * v42
43: v60 = v59 + v58
44: v61 = v60 + v2
45: v62 = v61 - v6
46: Eq: v62 = rhs(2)

47: v63 = v0 / v4
48: v64 = v63 - v7
49: Eq: v64 = rhs(3)

50: v65 = v1 / v5
51: v66 = v65 - v8
52: Eq: v66 = rhs(4)

53: v67 = v2 / v6
54: v68 = v67 - v9
55: Eq: v68 = rhs(5)

56: v69 = v42 * v9
57: v70 = v32 * v8
58: v71 = v7 + v70
59: v72 = v71 + v69
60: v73 = v72 + v10
61: Eq: v73 = rhs(6)

62: v74 = v47 * v9
63: v75 = v22 * v7
64: v76 = v75 + v8
65: v77 = v76 + v74
66: v78 = v77 + v11
67: Eq: v78 = rhs(7)

68: v79 = v37 * v8
69: v80 = v27 * v7
70: v81 = v80 + v79
71: v82 = v81 + v9
72: v83 = v82 + v12
73: Eq: v83 = rhs(8)

74: v84 = log(v4)
75: v86 = v3 + n85
76: v88 = n87 / v86
77: v89 = v88 + v84
78: v90 = v89 + v13
79: v91 = v90 - v10
80: Eq: v91 = rhs(9)

81: v92 = log(v5)
82: v94 = v3 + n93
83: v96 = n95 / v94
84: v97 = v96 + v92
85: v98 = v97 + v14
86: v99 = v98 - v11
87: Eq: v99 = rhs(10)

88: v100 = log(v6)
89: v102 = v3 + n101
90: v104 = n103 / v102
91: v105 = v104 + v100
92: v106 = v105 + v15
93: v107 = v106 - v12
94: Eq: v107 = rhs(11)

95: v108 = v0 * v13
96: Eq: v108 = rhs(12)

97: v109 = v1 * v14
98: Eq: v109 = rhs(13)

99: v110 = v2 * v15
100: Eq: v110 = rhs(14)

101: v111 = v0 + v1
102: v112 = v111 + v2
103: Eq: v112 = rhs(15)

Type 1 common subexpressions:
Type 2 common subexpressions:
17
22
27
32
37
42
47
Type 3 common subexpressions:
0: [ 0, 1]
1: [ 0, 1]
2: [ 0, 1]
3: [ 330, 380]
4: [ 0.175, 1]
5: [ 1.828e-05, 1]
6: [ 0.3347, 1]
7: [ 0, 1]
8: [ 0, 1]
9: [ 0, 1]
10: [ -0.6536, 0.1927]
11: [ -0.3207, 0.62]
12: [ -0.0003847, 0.99999]
13: [ -0.1353, 2.581]
14: [ -0.1416, 12.02]
15: [ -0.9722, 1.316]
Last value: [ 1, 1]

Testing solution 1 of 7
Strictly contains 1 of 7 solutions (1)
0: [ 0.222621, 0.242193]
1: [ 0.530553, 0.550553]
2: [ 0.217477, 0.237002]
3: [ 345.165, 346.428]
4: [ 0.563705, 0.583705]
5: [ 0.718909, 0.738909]
6: [ 0.583567, 0.603567]
7: [ 0.394924, 0.414924]
8: [ 0.731592, 0.751592]
9: [ 0.372669, 0.392669]
10: [ -0.337491, -0.317491]
11: [ -0.0989876, -0.0789876]
12: [ 0.536717, 0.556717]
13: [ 0, 0]
14: [ 0, 0]
15: [ 0, 0]

Testing solution 2 of 7
Strictly contains 1 of 7 solutions (2)
0: [ 1, 1]
1: [ 0, 0]
2: [ 0, 0]
3: [ 351.458, 351.458]
4: [ 1, 1]
5: [ 0.806239, 0.809707]
6: [ 0.848658, 0.867521]
7: [ 1, 1]
8: [ 0, 0]
9: [ 0, 0]
10: [ 0, 0]
11: [ 0.426924, 0.43821]
12: [ 0.823031, 0.825014]
13: [ 0, 0]
14: [ 0.596608, 0.612187]
15: [ 0.1352, 0.1552]
Warning: strict containment became easy
3: [ 3.4794243000000000e+02, 3.5497156999999999e+02]
3: [ 3.5145818664400883e+02, 3.5145818664400883e+02]  3.5145699999999999e+02

Testing solution 3 of 7
Strictly contains 1 of 7 solutions (3)
0: [ 0, 0]
1: [ 1, 1]
2: [ 0, 0]
3: [ 352.749, 352.749]
4: [ 0.56386, 0.575147]
5: [ 1, 1]
6: [ 0.3347, 0.33914]
7: [ 0, 0]
8: [ 1, 1]
9: [ 0, 0]
10: [ 0.190935, 0.1927]
11: [ 0, 0]
12: [ 0.999987, 0.999989]
13: [ 0.796466, 0.816466]
14: [ 0, 0]
15: [ 1.30211, 1.31529]
Warning: strict containment became easy
3: [ 3.4922135695548263e+02, 3.5627633386367415e+02]
3: [ 3.5274884540953087e+02, 3.5274884540953087e+02]  3.5274884540957839e+02

Testing solution 4 of 7
Strictly contains 1 of 7 solutions (4)
0: [ 0, 6.70838e-06]
1: [ 0, 1.65662e-05]
2: [ 0.999977, 1]
3: [ 373.156, 373.157]
4: [ 0.180869, 0.182871]
5: [ 1.94234e-05, 2.38684e-05]
6: [ 0.999977, 1]
7: [ 0, 3.74635e-05]
8: [ 0, 0.01]
9: [ 0.999977, 1]
10: [ 0.0631326, 0.0807482]
11: [ 0.602109, 0.62]
12: [ -7.07335e-06, 2.32746e-05]
13: [ 2.56338, 2.581]
14: [ 11.8959, 12.02]
15: [ 0, 0]

Testing solution 5 of 7
Strictly contains 1 of 7 solutions (5)
0: [ 0.476645, 0.496645]
1: [ 0.503355, 0.523355]
2: [ 0, 0]
3: [ 346.681, 347.807]
4: [ 0.764461, 0.784461]
5: [ 0.897567, 0.917567]
6: [ 0.565522, 0.585522]
7: [ 0.618366, 0.638366]
8: [ 0.555639, 0.575639]
9: [ 0, 0]
10: [ -0.0965671, -0.0765671]
11: [ 0.072063, 0.092063]
12: [ 0.887784, 0.892534]
13: [ 0, 0]
14: [ 0, 0]
15: [ 0.425564, 0.445564]

Testing solution 6 of 7
Strictly contains 1 of 7 solutions (6)
0: [ 0.882091, 0.901955]
1: [ 0, 0]
2: [ 0.0980448, 0.117909]
3: [ 350.734, 351.779]
4: [ 0.901075, 0.921075]
5: [ 0.711263, 0.730411]
6: [ 0.862769, 0.882769]
7: [ 0.969163, 0.989163]
8: [ 0, 0]
9: [ 0.11364, 0.13364]
10: [ -0.0951689, -0.0751689]
11: [ 0.393765, 0.413765]
12: [ 0.694098, 0.714098]
13: [ 0, 0]
14: [ 0.673198, 0.693198]
15: [ 0, 0]

Testing solution 7 of 7
Strictly contains 1 of 7 solutions (7)
0: [ 0, 0]
1: [ 0.670573, 0.690573]
2: [ 0.309427, 0.329427]
3: [ 346.093, 347.447]
4: [ 0.426834, 0.446834]
5: [ 0.670576, 0.690576]
6: [ 0.526878, 0.546878]
7: [ 0, 0]
8: [ 0.989995, 1]
9: [ 0.584972, 0.604972]
10: [ -0.321727, -0.301727]
11: [ -0.198616, -0.180095]
12: [ 0.395018, 0.415018]
13: [ 0.318219, 0.338219]
14: [ 0, 0]
15: [ 0, 0]
###############################################
Extended division test on eco9

Initial box:
0: [ -100, 100]
1: [ -100, 100]
2: [ -100, 100]
3: [ -100, 100]
4: [ -100, 100]
5: [ -100, 100]
6: [ 0.5, 100]
7: [ -100, -7]
Strictly contains 1 of 16 solutions (9)

After probing:
0: [ 0.88, 11.1969]
1: [ -13.4729, 82.0874]
2: [ -100, 100]
3: [ -100, 100]
4: [ -100, 100]
5: [ -100, 100]
6: [ 0.5, 100]
7: [ -100, -7]
Strictly contains 1 of 16 solutions (9)
###############################################
Gap probing on eco9
Strictly contains 1 of 16 solutions (9)

Initial box:
0: [ -100, 100]
1: [ -100, 100]
2: [ -100, 100]
3: [ -100, 100]
4: [ -100, 100]
5: [ -100, 100]
6: [ 0.5, 100]
7: [ -100, -7]

After gap probing:
0: [ 0.88, 15.1607]
1: [ -13.4729, 100]
2: [ -100, 100]
3: [ -100, 100]
4: [ -100, 100]
5: [ -100, 100]
6: [ 0.5, 100]
7: [ -100, -7]
