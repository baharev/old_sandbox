#################### DESCRIPTION ###############################################
#
# Last updated: 22 Aug 2009
#
# These models have a single solution corresponding to the steady state of an 
# extractive distillation column with 22 and 30 theoretical stages, 
# respectively. The model (MESH equations) and the notion are discusses in 
# greater detail in:
#
# A. Baharev, T. Achterberg, E. Rév;
# Computation of an extractive distillation column with affine arithmetic;
# AIChE Journal, 2009, 55 (7), 1695-1704.
# (preprint available from http://reliablecomputing.eu)
#
# The above cited paper seems to be the first paper on computing distillation 
# columns with interval methods. More recent results are given in:
#
# A. Baharev, E. Rév;
# A complete nonlinear system solver using affine arithmetic;
# Interval Analysis and Constraint Propagation for Applications (IntCP 2009);
# Workshop held in conjunction with the 15th International Conference on 
# Principles and Practice of Constraint Programming (CP 2009);
# Lisbon, Portugal, September 20th, 2009.
# (manuscript available from http://reliablecomputing.eu)
#
#
############## PROBLEM STATISTICS ##############################################
#
# Presolve eliminates 92 constraints and 92 variables.
# Substitution eliminates 631 variables.
# Adjusted problem:
# 523 variables:
#	  330 nonlinear variables
#	  193 linear variables
# 523 constraints; 1798 nonzeros
#	  390 nonlinear constraints
#	  133 linear constraints
# 0 objectives.
#
#
################## PARAMETERS FROM SPECIFICATION ###############################

# NUMBER OF STAGES
param N := 30;

# FEED STAGE LOCATIONS
param N_F1 := 10;
param N_F2 := 20;

# NUMBER OF COMPONENTS
param C := 3;

# REFLUX RATIO
param R := 5.0;

# DISTILLATE MOLAR FLOW RATE
param D := 0.73;

# PURITY RESTRICTION ON THE DISTILLATE COMPOSITION
param x_acetone_min := 0.92;

# LOWER BOUND ON ALL MOL FRACTIONS IN THE ENTIRE COLUMN
param xmin := 0.001;

################## PARAMETERS ##################################################

# FEED LOCATIONS AND VALUES ARE GIVEN IN THE DATA SECTION

param F{j in 0..N};
param f{i in 1..C, j in 0..N};

# FURTHER MODEL PARAMETERS

param lambda{1..C};
param a{1..C};
param b{1..C};
param c{1..C};
param Vm{1..C};
param k{1..C, 1..C};

param RG := 1.98721;
param P := 760.0;

# LOWER/UPPER BOUNDS ON THE VARIABLES, INITIAL ESTIMATES (IF NEEDED)
# VALUES ARE GIVEN IN THE DATA SECTION

param x_L{1..C, 0..N};   param x_U{1..C, 0..N};   param x_0{1..C, 0..N};
param y_L{1..C, 1..N+1}; param y_U{1..C, 1..N+1}; param y_0{1..C, 1..N+1};
param K_L{1..C, 1..N};   param K_U{1..C, 1..N};   param K_0{1..C, 1..N};

param V_L{1..N+1} default (1-0.32)*(R+1)*D;
param V_U{1..N+1} default (1+0.32)*(R+1)*D;
param V_0{1..N+1};

param l_L{1..C, 0..N}; param l_U{1..C, 0..N}; param l_0{1..C, 0..N};

param v_L{1..C, 1..N+1};
param v_U{1..C, j in 1..N+1} default V_U[j];
param v_0{1..C, 1..N+1};

param T_0{1..N};
param Q_L;	param Q_U;	param Q_0;

############### VARIABLES ######################################################

var x{i in 1..C, j in 0..N  } >= x_L[i,j], <= x_U[i,j], := x_0[i,j];

var y{i in 1..C, j in 1..N+1} >= y_L[i,j], <= y_U[i,j], := y_0[i,j];

var K{i in 1..C, j in 1..N  } >= K_L[i,j], <= K_U[i,j], := K_0[i,j];

var V{j in 1..N+1} >= V_L[j], <= V_U[j], := V_0[j];

var v{i in 1..C, j in 1..N+1} >= v_L[i,j], <= v_U[i,j], := v_0[i,j];

var l{i in 1..C, j in 0..N  } >= l_L[i,j], <= l_U[i,j], := l_0[i,j];

var Q >= Q_L, <= Q_U, := Q_0;

var T{j in 1..N} >= 327.0, <= 374.0, := T_0[j];

####### DEFINED VARIABLES (THEY ARE ELIMINATED BY PRESOLVE / SUBTITUTION) ######

var L{j in 0..N} = V[j+1] - D + sum{i1 in 0..j} F[i1];

var H{j in 1..N+1} = sum{i in 1..C} lambda[i]*y[i,j];

var rcp_T{j in 1..N} = 1.0/T[j];

var p{i in 1..C, j in 1..N} = exp(a[i]-b[i]/(T[j]+c[i]));

var Lambda{i1 in 1..C, i2 in 1..C, j in 1..N} =
  Vm[i2]/Vm[i1]*exp((-k[i1,i2]/RG)*rcp_T[j]);

var sum_xLambda{i in 1..C, j in 1..N} = sum{i1 in 1..C} (x[i1,j]*Lambda[i,i1,j]);

var rcp_sum_xLambda{i in 1..C, j in 1..N} = 1.0/sum_xLambda[i,j];

var gamma{i in 1..C, j in 1..N} =
  exp( -log(sum_xLambda[i,j]) + 1.0 - (sum{i2 in 1..C} (x[i2,j]*Lambda[i2,i,j]*rcp_sum_xLambda[i2,j])) );
  
############## EQUATIONS #######################################################

M_aux_y1_x0{i in 1..C}:
	x[i,0] - y[i,1] = 0.0;

M_aux_yNp1_xN{i in 1..C}:
	y[i,N+1] - x[i,N] = 0.0;
	
M_aux_V1:
	V[1] - (R+1.0)*D = 0.0;
	
M_aux_l{i in 1..C, j in 0..N}:
	l[i,j] - L[j]*x[i,j] = 0.0;

M_aux_v{i in 1..C, j in 1..N+1}:
	v[i,j] - V[j]*y[i,j] = 0.0;

M_eq{i in 1..C-1, j in 1..N}:
	l[i,j] + D*y[i,1] - v[i,j+1] - sum{i1 in 1..j} f[i,i1] = 0.0;

E_eq{i in 1..C, j in 1..N}:
	y[i,j] - K[i,j]*x[i,j] = 0.0;
	
S_x_eq{j in 1..N}:
	sum{i in 1..C} x[i,j] - 1.0 = 0.0;

S_y_eq{j in 1..N}:
	sum{i in 1..C} y[i,j] - 1.0 = 0.0;

H_eq{j in 1..N+1}:
	Q - V[j]*H[j] = 0.0;

E_aux_K{i in 1..C, j in 1..N}:
	K[i,j] - gamma[i,j]*(p[i,j]/P) = 0.0;

################### DATA SECTION ###############################################
	
data;

let lambda[1] := 6.960;
let lambda[2] := 8.426;
let lambda[3] := 9.717;

let a[1] := 16.732;
let a[2] := 18.510;
let a[3] := 18.304;

let b[1] := 2975.9;
let b[2] := 3593.4;
let b[3] := 3816.4;

let c[1] := -34.523;
let c[2] := -35.225;
let c[3] := -46.130;

let Vm[1] := 74.050;
let Vm[2] := 40.729;
let Vm[3] := 18.069;

for {i in 1..C, j in 0..N} {

	let x_L[i,j] := xmin;
	let x_U[i,j] := 1.0-(C-1)*xmin;
}

for {i in 1..C, j in 1..N+1} {
	
	let y_L[i,j] := xmin;
	let y_U[i,j] := 1.0-(C-1)*xmin;
}

let y_L[1,1] := x_acetone_min;
let y_U[2,1] := 1.00-y_L[1,1]-y_L[3,1];
let y_U[3,1] := 1.00-y_L[1,1]-y_L[2,1];

let x_L[1,0] := y_L[1,1];
let x_U[2,0] := y_U[2,1];
let x_U[3,0] := y_U[3,1];

for {j in 1..N} {
	let K_L[1,j] := 0.98;
	let K_U[1,j] := 38.97;
	let K_L[2,j] := 0.80;
	let K_U[2,j] := 7.53;
	let K_L[3,j] := 0.26;
	let K_U[3,j] := 1.01;
}

let Q_L := (R+1)*D*min(lambda[1], lambda[2], lambda[3]);
let Q_U := (R+1)*D*max(lambda[1], lambda[2], lambda[3]);

for {i in 1..C, j in 0..N}
	let f[i,j] := 0.0;

let f[3, N_F1] := 2.000;

let f[1, N_F2] := 0.783;
let f[2, N_F2] := 0.217;

for {j in 0..N}
	let F[j] := sum{i in 1..C} f[i,j];

for {i in 1..C, j in 1..N+1}
	let v_L[i,j] := 0.0;

for {i in 1..C, j in 0..N}
	let l_L[i,j] := 0.0;

for {i in 1..C, j in 0..N}
	let l_U[i,j] := sum{i1 in 0..j} f[i,i1] + v_U[i,j+1] - y_L[i,1]*D;

let k[1,2] := -157.981;
let k[1,3] :=  393.27;
let k[2,3] := -52.605;

let k[2,1] := 592.638;
let k[3,1] := 1430.0;
let k[3,2] := 620.63;

let k[1,1] := 0.0;
let k[2,2] := 0.0;
let k[3,3] := 0.0;

# DUMB INITIAL ESTIMATES (IF NEEDED)
	
for {i in 1..C, j in 0..N}
	let x_0[i,j] := (x_L[i,j]+x_U[i,j])/2.0;

for {i in 1..C, j in 1..N+1}
	let y_0[i,j] := (y_L[i,j]+y_U[i,j])/2.0;
	
for {i in 1..C, j in 1..N+1}
	let v_0[i,j] := (v_L[i,j]+v_U[i,j])/2.0;
	
for {i in 1..C, j in 0..N}
	let l_0[i,j] := (l_L[i,j]+l_U[i,j])/2.0;

for {i in 1..C, j in 1..N}
	let K_0[i,j] := (K_L[i,j]+K_U[i,j])/2.0;
	
for {j in 1..N+1}
	let V_0[j] := (V_L[j]+V_U[j])/2.0;
	
for {j in 1..N}
	let T_0[j] := 335.0;

let Q_0 := (Q_L + Q_U)/2.0;

################################################################################
	
option show_stats 1;
option presolve 10;
option substout 1;
option var_bounds 2;
option nl_comments 0;
option nl_permute 0;

solve;

############# SOLUTION #########################################################
#
# display x, y, K, V, v, l, T, Q;
#
# :          x            y            K        :=
# 1 0    0.972468          .           .
# 1 1    0.970063     0.972468      1.00248
# 1 2    0.966236     0.970464      1.00438
# 1 3    0.960936     0.967278      1.0066
# 1 4    0.953852     0.962867      1.00945
# 1 5    0.944286     0.956976      1.01344
# 1 6    0.930808     0.94903       1.01958
# 1 7    0.910321     0.937852      1.03024
# 1 8    0.874945     0.920897      1.05252
# 1 9    0.797597     0.891728      1.11802
# 1 10   0.500598     0.828414      1.65485
# 1 11   0.497896     0.82561       1.6582
# 1 12   0.494659     0.822268      1.66229
# 1 13   0.490756     0.818262      1.66735
# 1 14   0.486012     0.813431      1.67368
# 1 15   0.4802       0.807559      1.68172
# 1 16   0.473021     0.800361      1.69202
# 1 17   0.464194     0.791466      1.70503
# 1 18   0.454248     0.780509      1.71825
# 1 19   0.450297     0.768068      1.70569
# 1 20   0.501966     0.762429      1.51888
# 1 21   0.501141     0.761676      1.51988
# 1 22   0.499793     0.76045       1.52153
# 1 23   0.497585     0.758447      1.52425
# 1 24   0.493951     0.755166      1.52883
# 1 25   0.487892     0.749763      1.53674
# 1 26   0.477444     0.740752      1.55149
# 1 27   0.457488     0.725216      1.58521
# 1 28   0.408125     0.695603      1.70438
# 1 29   0.243844     0.622588      2.55322
# 1 30   0.0322018    0.374474     11.629
# 1 31        .       0.0322018        .
# 2 0    0.0111446         .           .
# 2 1    0.00891983   0.0111446     1.24941
# 2 2    0.00746327   0.00929104    1.2449
# 2 3    0.00652323   0.00807842    1.23841
# 2 4    0.00593335   0.0072969     1.22981
# 2 5    0.00558639   0.00680786    1.21865
# 2 6    0.0054172    0.00652206    1.20395
# 2 7    0.00539372   0.00638557    1.18389
# 2 8    0.00551724   0.00637244    1.15501
# 2 9    0.00583283   0.00648566    1.11192
# 2 10   0.00611697   0.0067689     1.10658
# 2 11   0.00901975   0.00995821    1.10405
# 2 12   0.0124916    0.0137541     1.10107
# 2 13   0.0166691    0.0182956     1.09757
# 2 14   0.0217313    0.0237621     1.09345
# 2 15   0.0279165    0.0303893     1.08858
# 2 16   0.0355471    0.0384909     1.08281
# 2 17   0.04507      0.0484926     1.07594
# 2 18   0.057139     0.0609838     1.06729
# 2 19   0.0729563    0.0768204     1.05296
# 2 20   0.0960901    0.0975002     1.01467
# 2 21   0.0969765    0.0983454     1.01412
# 2 22   0.0984219    0.0997223     1.01321
# 2 23   0.100784     0.101968      1.01175
# 2 24   0.104655     0.10564       1.00941
# 2 25   0.111031     0.111661      1.00567
# 2 26   0.121594     0.121585      0.999925
# 2 27   0.139156     0.138056      0.992095
# 2 28   0.167273     0.165553      0.989716
# 2 29   0.189549     0.21021       1.109
# 2 30   0.0920108    0.249752      2.71437
# 2 31        .       0.0920108        .
# 3 0    0.016387          .           .
# 3 1    0.0210172    0.016387      0.779697
# 3 2    0.0263006    0.0202446     0.769738
# 3 3    0.0325406    0.0246441     0.757332
# 3 4    0.0402143    0.0298363     0.741933
# 3 5    0.0501279    0.0362157     0.722467
# 3 6    0.0637749    0.0444478     0.696949
# 3 7    0.0842856    0.0557626     0.661591
# 3 8    0.119538     0.0727301     0.608426
# 3 9    0.19657      0.101787      0.517812
# 3 10   0.493285     0.164817      0.334121
# 3 11   0.493084     0.164432      0.333477
# 3 12   0.492849     0.163978      0.332715
# 3 13   0.492575     0.163442      0.331811
# 3 14   0.492256     0.162807      0.330736
# 3 15   0.491884     0.162051      0.329451
# 3 16   0.491432     0.161148      0.327915
# 3 17   0.490736     0.160042      0.326126
# 3 18   0.488613     0.158507      0.324402
# 3 19   0.476747     0.155112      0.325354
# 3 20   0.401943     0.140071      0.348484
# 3 21   0.401883     0.139978      0.348306
# 3 22   0.401785     0.139828      0.348017
# 3 23   0.401631     0.139585      0.347545
# 3 24   0.401394     0.139194      0.346777
# 3 25   0.401077     0.138577      0.345511
# 3 26   0.400962     0.137663      0.343333
# 3 27   0.403356     0.136728      0.338976
# 3 28   0.424602     0.138844      0.326999
# 3 29   0.566607     0.167202      0.295094
# 3 30   0.875787     0.375775      0.429071
# 3 31        .       0.875787         .
# ;

# V [*] :=
 # 1 4.38       7 4.31754   13 4.13506   19 4.10042   25 4.09742   31 3.23408
 # 2 4.37507    8 4.28938   14 4.13158   20 4.10653   26 4.09087
 # 3 4.36863    9 4.24189   15 4.12735   21 4.10599   27 4.07916
 # 4 4.36048   10 4.14236   16 4.12216   22 4.10511   28 4.05435
 # 5 4.35007   11 4.14035   17 4.11575   23 4.10367   29 3.979
 # 6 4.33641   12 4.13794   18 4.10801   24 4.10132   30 3.67779
# ;

# :          v           l        :=
# 1 0        .       3.54951
# 1 1    4.25941     3.53594
# 1 2    4.24585     3.51578
# 1 3    4.22568     3.48866
# 1 4    4.19856     3.45301
# 1 5    4.16291     3.40548
# 1 6    4.11538     3.33931
# 1 7    4.04921     3.24018
# 1 8    3.95008     3.07271
# 1 9    3.78261     2.72169
# 1 10   3.43159     2.70841
# 1 11   3.41831     2.6926
# 1 12   3.4025      2.67366
# 1 13   3.38357     2.65086
# 1 14   3.36076     2.62318
# 1 15   3.33308     2.58931
# 1 16   3.29922     2.54758
# 1 17   3.25748     2.49644
# 1 18   3.20634     2.4395
# 1 19   3.1494      2.42103
# 1 20   3.13094     3.20053
# 1 21   3.12743     3.19483
# 1 22   3.12173     3.18552
# 1 23   3.11242     3.17027
# 1 24   3.09718     3.14519
# 1 25   3.0721      3.10342
# 1 26   3.03032     3.03137
# 1 27   2.95827     2.89331
# 1 28   2.82022     2.55038
# 1 29   2.47728     1.45033
# 1 30   1.37724     0.177241
# 1 31   0.104143        .
# 2 0        .       0.0406776
# 2 1    0.0488131   0.0325134
# 2 2    0.0406489   0.0271561
# 2 3    0.0352916   0.0236824
# 2 4    0.031818    0.0214791
# 2 5    0.0296147   0.0201468
# 2 6    0.0282823   0.0194344
# 2 7    0.0275699   0.0191983
# 2 8    0.0273338   0.0193759
# 2 9    0.0275114   0.0199037
# 2 10   0.0280393   0.0330949
# 2 11   0.0412305   0.0487783
# 2 12   0.0569138   0.0675177
# 2 13   0.0756533   0.0900395
# 2 14   0.098175    0.117292
# 2 15   0.125427    0.15053
# 2 16   0.158666    0.191448
# 2 17   0.199584    0.242387
# 2 18   0.250522    0.306861
# 2 19   0.314996    0.392252
# 2 20   0.400387    0.61267
# 2 21   0.403805    0.618236
# 2 22   0.409371    0.627309
# 2 23   0.418445    0.642127
# 2 24   0.433262    0.666386
# 2 25   0.457521    0.706251
# 2 26   0.497387    0.772019
# 2 27   0.563154    0.880073
# 2 28   0.671209    1.04529
# 2 29   0.836424    1.1274
# 2 30   0.918535    0.506434
# 2 31   0.29757         .
# 3 0        .       0.0598126
# 3 1    0.0717751   0.0766089
# 3 2    0.0885714   0.0956983
# 3 3    0.107661    0.118138
# 3 4    0.130101    0.145578
# 3 5    0.157541    0.180781
# 3 6    0.192744    0.228795
# 3 7    0.240757    0.300004
# 3 8    0.311967    0.419805
# 3 9    0.431767    0.67077
# 3 10   0.682732    2.66884
# 3 11   0.680806    2.66657
# 3 12   0.678533    2.66388
# 3 13   0.675843    2.66069
# 3 14   0.67265     2.65688
# 3 15   0.668843    2.65231
# 3 16   0.664277    2.64673
# 3 17   0.658692    2.63919
# 3 18   0.651149    2.62406
# 3 19   0.636023    2.56324
# 3 20   0.575205    2.56279
# 3 21   0.574749    2.56205
# 3 22   0.574009    2.56085
# 3 23   0.572811    2.55892
# 3 24   0.570879    2.55584
# 3 25   0.567807    2.5512
# 3 26   0.563162    2.54577
# 3 27   0.557736    2.55096
# 3 28   0.562924    2.65333
# 3 29   0.665297    3.37006
# 3 30   1.38202     4.8204
# 3 31   2.83236         .
# ;

# T [*] :=
 # 1 329.247    6 329.567   11 333.501   16 333.529   21 332.759   26 332.831
 # 2 329.29     7 329.729   12 333.503   17 333.546   22 332.762   27 332.932
 # 3 329.337    8 330.028   13 333.506   18 333.56    23 332.768   28 333.348
 # 4 329.393    9 330.731   14 333.511   19 333.488   24 332.777   29 335.869
 # 5 329.465   10 333.5     15 333.518   20 332.757   25 332.794   30 350.446
# ;
#
# Q = 30.7542
#
# END OF FILE
